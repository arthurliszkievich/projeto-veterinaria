services: # Define os contêineres (serviços) da sua aplicação.
  db: # Nome do serviço do banco de dados.
    image: postgres:16 # Usa a imagem oficial do PostgreSQL versão 16.
    volumes:
      # Mapeia um volume nomeado 'postgres_data' para o diretório de dados do PostgreSQL dentro do container.
      # Isso garante que os dados do banco persistam mesmo se o container for parado/removido.
      - postgres_data:/var/lib/postgresql/data/
    environment:
      # Variáveis de ambiente para configurar o PostgreSQL na primeira inicialização.
      # Os valores virão do seu arquivo .env.
      - POSTGRES_DB=clinic_db
      - POSTGRES_USER=clinic_user
      - POSTGRES_PASSWORD=testpassword123
    ports:
      # Mapeia a porta 5432 do container para a porta 5432 do seu computador (host).
      # Útil para conectar ao banco de dados de fora do Docker (ex: com DBeaver, pgAdmin) durante o desenvolvimento.
      # Em produção, essa exposição direta geralmente não é recomendada por segurança.
      - "5432:5432" # Formato "HOST:CONTAINER"
    healthcheck: # Define como verificar a saúde deste serviço.
      # Comando para verificar se o PostgreSQL está pronto para aceitar conexões.
      test: ["CMD-SHELL", "pg_isready -U clinic_user -d clinic_db -h localhost || exit 1"]
      interval: 10s    # Intervalo entre as verificações.
      timeout: 5s      # Tempo máximo para a verificação responder.
      retries: 5       # Número de tentativas antes de marcar como "unhealthy".
      start_period: 30s # Período inicial de tolerância para o serviço iniciar.

  web: # Nome do serviço da sua aplicação Django.
    build: # Define como construir a imagem para este serviço.
      context: . # Usa o diretório atual (onde está o docker-compose.yml) como contexto de build.
      dockerfile: Dockerfile # Especifica qual Dockerfile usar (neste caso, o nome padrão).
      args:
        DJANGO_SECRET_KEY_ARG: ${SECRET_KEY}
    # O comando CMD do Dockerfile (Gunicorn) será usado para iniciar.
    volumes:
      - .:/home/django/web # Para desenvolvimento, isso monta seu código local no container,
      #                        permitindo live-reload. Para testar a imagem de produção, comente ou remova.
      # Mapeia volumes nomeados para os diretórios de arquivos estáticos e de mídia.
      # Esses volumes podem ser usados por um servidor web (como Nginx) em produção para servir esses arquivos.
      - static_volume:/home/django/web/staticfiles
      - media_volume:/home/django/web/mediafiles
    ports:
      # Mapeia a porta 8000 do container (onde Gunicorn escuta) para a porta 8000 do seu host.
      - "8000:8000"
    depends_on: # Define dependências entre serviços.
      db: # O serviço 'web' depende do serviço 'db'.
        condition: service_healthy # 'web' só iniciará DEPOIS que 'db' estiver "healthy" (passar no healthcheck).
    env_file:
      - .env # Carrega variáveis de ambiente do arquivo .env para este serviço.
    environment:
      # Você pode definir/sobrescrever variáveis aqui também.
      - DJANGO_SETTINGS_MODULE=config.settings
    healthcheck: # Define como verificar a saúde deste serviço.
      # Comando para verificar se a aplicação Django/Gunicorn está respondendo.
      # Idealmente, você teria um endpoint /health/ na sua API que retorna 200 OK.
      test: ["CMD-SHELL", "curl -f http://localhost:8000/ || exit 1"] # Adapte a URL se tiver um endpoint específico
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s # Dá mais tempo para Django e Gunicorn iniciarem completamente.

volumes: # Define os volumes nomeados que podem ser usados pelos serviços.
  postgres_data: # Volume para os dados do PostgreSQL.
  static_volume: # Volume para os arquivos estáticos coletados.
  media_volume:  # Volume para os arquivos de mídia enviados pelos usuários.